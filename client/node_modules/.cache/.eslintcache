[{"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/index.js":"1","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/App.js":"2","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/reportWebVitals.js":"3","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeSet.js":"4","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js":"5"},{"size":958,"mtime":1618530942420,"results":"6","hashOfConfig":"7"},{"size":2201,"mtime":1618530942410,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1618443904052,"results":"9","hashOfConfig":"7"},{"size":4200,"mtime":1618540542590,"results":"10","hashOfConfig":"7"},{"size":2991,"mtime":1618539409220,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"fa9pav",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/index.js",[],["24","25"],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/App.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/reportWebVitals.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeSet.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js",["26","27"],"import React from \"react\";\r\n\r\nclass ProjectOfficeRead extends React.Component {\r\n  // state = { dataKeyBattery: null,dataKeyColumns: null, dataKeyElevators: null, dataKeyFloors: null, test: null};\r\n  state = {dataKeyNewOrder: null};\r\n  componentDidMount() {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.MyStringStore;\r\n    console.log(\"================================\");\r\n    console.log(drizzle);\r\n    console.log(\"----------------\");\r\n    console.log(drizzleState);\r\n\r\n    console.log(\"Transactions\",drizzleState.transactions);\r\n\r\n    console.log(\"My string store\",drizzle.contracts.MyStringStore);\r\n    console.log(\"My contract address\",drizzle.contracts.MyStringStore.address);\r\n    console.log(\"Contracts\",this.props.drizzleState.contracts);\r\n\r\n    // let drizzle know we want to watch the `myString` method\r\n    // const dataKeyBattery = contract.methods[\"batteries\"].cacheCall();\r\n    // const dataKeyColumns = contract.methods[\"columns\"].cacheCall();\r\n    // const dataKeyElevators = contract.methods[\"elevators\"].cacheCall();\r\n    // const dataKeyFloors = contract.methods[\"floors\"].cacheCall();\r\n    // const dataKeyNewOrder = contract.methods[\"newOrder\"].cacheCall(1,2,3,4);\r\n    // const dataKeyNewOrder = contract.methods.newOrder.cacheCall();\r\n    // save the `dataKey` to local component state for later reference\r\n    // this.setState({ dataKeyBattery, dataKeyColumns, dataKeyElevators,dataKeyFloors});\r\n    // this.setState({ dataKeyNewOrder });\r\n\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { MyStringStore } = this.props.drizzleState.contracts;\r\n\r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    // const batteries = MyStringStore.batteries[this.state.dataKeyBattery];\r\n    // const columns = MyStringStore.columns[this.state.dataKeyColumns];\r\n    // const elevators = MyStringStore.elevators[this.state.dataKeyElevators];\r\n    // const floors = MyStringStore.floors[this.state.dataKeyFloors];\r\n    // const test = MyStringStore.test[this.state.test];\r\n\r\n    // if it exists, then we display its value\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Controllers</th>\r\n              <th scope=\"col\">Shafts</th>\r\n              <th scope=\"col\">Doors</th>\r\n              <th scope=\"col\">Buttons</th>\r\n              <th scope=\"col\">Displays</th>\r\n              <th scope=\"col\">Speakers</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              {/* <td>{batteries && batteries.value}</td>\r\n              <td>{columns && columns.value}</td>\r\n              <td>{elevators && elevators.value}</td>\r\n              <td>{floors && floors.value}</td> */}\r\n              {/* <td>{test && test.value}</td> */}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default ProjectOfficeRead;\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":8,"column":11,"nodeType":"34","messageId":"35","endLine":8,"endColumn":19},{"ruleId":"32","severity":1,"message":"36","line":35,"column":13,"nodeType":"34","messageId":"35","endLine":35,"endColumn":26},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'contract' is assigned a value but never used.","Identifier","unusedVar","'MyStringStore' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]