[{"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/index.js":"1","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/App.js":"2","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeSet.js":"3","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js":"4","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/MaterialProviderSet.js":"5","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/MaterialProviderRead.js":"6","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/SolutionManufacturingRead.js":"7","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/SolutionManufacturingSet.js":"8","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/QualitySecuritySet.js":"9","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/QualitySecurityRead.js":"10"},{"size":919,"mtime":1618586570995,"results":"11","hashOfConfig":"12"},{"size":3447,"mtime":1618586396235,"results":"13","hashOfConfig":"12"},{"size":5760,"mtime":1618594458385,"results":"14","hashOfConfig":"12"},{"size":2594,"mtime":1618595535415,"results":"15","hashOfConfig":"12"},{"size":5264,"mtime":1618597637925,"results":"16","hashOfConfig":"12"},{"size":3159,"mtime":1618597444655,"results":"17","hashOfConfig":"12"},{"size":2586,"mtime":1618581625155,"results":"18","hashOfConfig":"12"},{"size":5188,"mtime":1618583376425,"results":"19","hashOfConfig":"12"},{"size":4609,"mtime":1618587385325,"results":"20","hashOfConfig":"12"},{"size":2297,"mtime":1618586025785,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"fa9pav",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/index.js",[],["45","46"],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/App.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeSet.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/MaterialProviderSet.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/MaterialProviderRead.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/SolutionManufacturingRead.js",["47","48"],"import React from \"react\";\r\n\r\nclass SolutionManufacturingRead extends React.Component {\r\n  // state = { dataKeyBattery: null,dataKeyColumns: null, dataKeyElevators: null, dataKeyFloors: null, test: null};\r\n  state = { dataKey: null };\r\n  componentDidMount() {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.SolutionManufacturing;\r\n    console.log(\"================================\");\r\n    console.log(drizzle);\r\n    console.log(\"----------------\");\r\n    console.log(drizzleState);\r\n\r\n    console.log(\"Transactions\",drizzleState.transactions);\r\n\r\n    console.log(\"Solution Manu--\",drizzle.contracts.SolutionManufacturing);\r\n    console.log(\"My contract address\",drizzle.contracts.SolutionManufacturing.address);\r\n    console.log(\"Contracts\",this.props.drizzleState.contracts);\r\n    // const dataKey = contract.methods[\"getCommand\"].cacheCall();\r\n    // this.setState({ dataKey });\r\n    // console.log(\"Datakey:\",this.state.dataKey);\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { SolutionManufacturing } = this.props.drizzleState.contracts;\r\n    // const newCommand = SolutionManufacturing.getCommand[this.state.dataKey];\r\n\r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    // const batteries = MaterialProvider.batteries[this.state.dataKeyBattery];\r\n    // const columns = MaterialProvider.columns[this.state.dataKeyColumns];\r\n    // const elevators = MaterialProvider.elevators[this.state.dataKeyElevators];\r\n    // const floors = MaterialProvider.floors[this.state.dataKeyFloors];\r\n    // const test = MaterialProvider.test[this.state.test];\r\n\r\n    // if it exists, then we display its value\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Controllers</th>\r\n              <th scope=\"col\">Shafts</th>\r\n              <th scope=\"col\">Doors</th>\r\n              <th scope=\"col\">Buttons</th>\r\n              <th scope=\"col\">Displays</th>\r\n              <th scope=\"col\">New command -- </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              {/* <td>{batteries && batteries.value}</td>\r\n              <td>{columns && columns.value}</td>\r\n              <td>{elevators && elevators.value}</td>\r\n              <td>{floors && floors.value}</td> */}\r\n              {/* <td>{newCommand && newCommand.value}</td> */}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default SolutionManufacturingRead;\r\n","/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/SolutionManufacturingSet.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/QualitySecuritySet.js",[],"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/QualitySecurityRead.js",["49","50"],"import React from \"react\";\r\n\r\nclass QualitySecurityRead extends React.Component {\r\n  // state = { dataKeyBattery: null,dataKeyColumns: null, dataKeyElevators: null, dataKeyFloors: null, test: null};\r\n  state = {dataKeyNewOrder: null};\r\n  componentDidMount() {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.QualitySecurity;\r\n    console.log(\"================================\");\r\n    console.log(drizzle);\r\n    console.log(\"----------------\");\r\n    console.log(drizzleState);\r\n\r\n    console.log(\"Transactions\",drizzleState.transactions);\r\n\r\n    console.log(\"My string store\",drizzle.contracts.QualitySecurity);\r\n    console.log(\"My contract address\",drizzle.contracts.QualitySecurity.address);\r\n    console.log(\"Contracts\",this.props.drizzleState.contracts);\r\n\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { QualitySecurity } = this.props.drizzleState.contracts;\r\n\r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    // const batteries = QualitySecurity.batteries[this.state.dataKeyBattery];\r\n    // const columns = QualitySecurity.columns[this.state.dataKeyColumns];\r\n    // const elevators = QualitySecurity.elevators[this.state.dataKeyElevators];\r\n    // const floors = QualitySecurity.floors[this.state.dataKeyFloors];\r\n    // const test = QualitySecurity.test[this.state.test];\r\n\r\n    // if it exists, then we display its value\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Controllers</th>\r\n              <th scope=\"col\">Shafts</th>\r\n              <th scope=\"col\">Doors</th>\r\n              <th scope=\"col\">Buttons</th>\r\n              <th scope=\"col\">Displays</th>\r\n              <th scope=\"col\">Speakers</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              {/* <td>{batteries && batteries.value}</td>\r\n              <td>{columns && columns.value}</td>\r\n              <td>{elevators && elevators.value}</td>\r\n              <td>{floors && floors.value}</td> */}\r\n              {/* <td>{test && test.value}</td> */}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default QualitySecurityRead;\r\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":8,"column":11,"nodeType":"57","messageId":"58","endLine":8,"endColumn":19},{"ruleId":"55","severity":1,"message":"59","line":26,"column":13,"nodeType":"57","messageId":"58","endLine":26,"endColumn":34},{"ruleId":"55","severity":1,"message":"56","line":8,"column":11,"nodeType":"57","messageId":"58","endLine":8,"endColumn":19},{"ruleId":"55","severity":1,"message":"60","line":24,"column":13,"nodeType":"57","messageId":"58","endLine":24,"endColumn":28},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'contract' is assigned a value but never used.","Identifier","unusedVar","'SolutionManufacturing' is assigned a value but never used.","'QualitySecurity' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]