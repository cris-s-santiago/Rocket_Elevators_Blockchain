{"ast":null,"code":"var _jsxFileName = \"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/QualitySecurityRead.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QualitySecurityRead extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKeyControllers: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.QualitySecurity; // let drizzle know we want to watch the `myString` method\n\n    const dataKeyControllers = contract.methods[\"qualityList\"].cacheCall([0]); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKeyControllers\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      QualitySecurity\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n\n    const controllers = QualitySecurity.qualityList[this.state.dataKeyControllers];\n    console.log(\"Test********\" + controllers); // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Controllers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: controllers && controllers.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default QualitySecurityRead;","map":{"version":3,"sources":["/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/QualitySecurityRead.js"],"names":["React","QualitySecurityRead","Component","state","dataKeyControllers","componentDidMount","drizzle","props","contract","contracts","QualitySecurity","methods","cacheCall","setState","render","drizzleState","controllers","qualityList","console","log","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,mBAAN,SAAkCD,KAAK,CAACE,SAAxC,CAAkD;AAAA;AAAA;AAAA,SAChDC,KADgD,GACxC;AAAEC,MAAAA,kBAAkB,EAAE;AAAtB,KADwC;AAAA;;AAGjDC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,eAAnC,CAFmB,CAInB;;AACA,UAAMN,kBAAkB,GAAGI,QAAQ,CAACG,OAAT,CAAiB,aAAjB,EAAgCC,SAAhC,CAA2C,CAAC,CAAD,CAA3C,CAA3B,CALmB,CAOnB;;AACA,SAAKC,QAAL,CAAc;AAAET,MAAAA;AAAF,KAAd;AACA;;AAEDU,EAAAA,MAAM,GAAG;AACR;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAsB,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAApD,CAFQ,CAIR;;AACA,UAAMO,WAAW,GAAGN,eAAe,CAACO,WAAhB,CAA4B,KAAKd,KAAL,CAAWC,kBAAvC,CAApB;AACEc,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBH,WAA7B,EANM,CAQR;;AACA,wBACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACK;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA,gCACE;AAAA,iCACE;AAAA,mCACE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAA,iCACE;AAAA,mCACE;AAAA,wBAAKA,WAAW,IAAIA,WAAW,CAACI;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YADD;AAgBA;;AAvCgD;;AA0ClD,eAAenB,mBAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass QualitySecurityRead extends React.Component {\r\n  state = { dataKeyControllers: null};\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { drizzle } = this.props;\r\n\t\tconst contract = drizzle.contracts.QualitySecurity;\r\n\r\n\t\t// let drizzle know we want to watch the `myString` method\r\n\t\tconst dataKeyControllers = contract.methods[\"qualityList\"].cacheCall(([0]));\r\n\r\n\t\t// save the `dataKey` to local component state for later reference\r\n\t\tthis.setState({ dataKeyControllers });\r\n\t}\r\n\r\n\trender() {\r\n\t\t// get the contract state from drizzleState\r\n\t\tconst { QualitySecurity } = this.props.drizzleState.contracts;\r\n\r\n\t\t// using the saved `dataKey`, get the variable we're interested in\r\n\t\tconst controllers = QualitySecurity.qualityList[this.state.dataKeyControllers];\r\n    console.log(\"Test********\" + controllers);\r\n\r\n\t\t// if it exists, then we display its value\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Controllers</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{controllers && controllers.value}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default QualitySecurityRead;\r\n"]},"metadata":{},"sourceType":"module"}