{"ast":null,"code":"var _jsxFileName = \"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectOfficeRead extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      test: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n    console.log(\"================================\");\n    console.log(drizzle);\n    console.log(\"----------------\");\n    console.log(drizzleState);\n    console.log(\"Transactions\", drizzleState.transactions);\n    console.log(\"My string store\", drizzle.contracts.MyStringStore);\n    console.log(\"My contract address\", drizzle.contracts.MyStringStore.address);\n    console.log(\"Contracts\", this.props.drizzleState.contracts); // let drizzle know we want to watch the `myString` method\n    // const dataKeyBattery = contract.methods[\"batteries\"].cacheCall();\n    // const dataKeyColumns = contract.methods[\"columns\"].cacheCall();\n    // const dataKeyElevators = contract.methods[\"elevators\"].cacheCall();\n    // const dataKeyFloors = contract.methods[\"floors\"].cacheCall();\n\n    const test = contract.methods.newOrder.cacheCall(1, 2, 3, 4); // save the `dataKey` to local component state for later reference\n    // this.setState({ dataKeyBattery, dataKeyColumns, dataKeyElevators,dataKeyFloors});\n\n    this.setState({\n      test\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      MyStringStore\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n    // const batteries = MyStringStore.batteries[this.state.dataKeyBattery];\n    // const columns = MyStringStore.columns[this.state.dataKeyColumns];\n    // const elevators = MyStringStore.elevators[this.state.dataKeyElevators];\n    // const floors = MyStringStore.floors[this.state.dataKeyFloors];\n    // const test = MyStringStore.test[this.state.test];\n    // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Controllers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Shafts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Doors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Buttons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Displays\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Speakers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ProjectOfficeRead;","map":{"version":3,"sources":["/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js"],"names":["React","ProjectOfficeRead","Component","state","test","componentDidMount","drizzle","drizzleState","props","contract","contracts","MyStringStore","console","log","transactions","address","methods","newOrder","cacheCall","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAAA;AAAA;AAAA,SAE9CC,KAF8C,GAEtC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAFsC;AAAA;;AAG9CC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA4B,KAAKC,KAAvC;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,aAAnC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BN,YAAY,CAACO,YAAxC;AAEAF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BP,OAAO,CAACI,SAAR,CAAkBC,aAAhD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCP,OAAO,CAACI,SAAR,CAAkBC,aAAlB,CAAgCI,OAAlE;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB,KAAKL,KAAL,CAAWD,YAAX,CAAwBG,SAAhD,EAZkB,CAclB;AACA;AACA;AACA;AACA;;AACA,UAAMN,IAAI,GAAGK,QAAQ,CAACO,OAAT,CAAiBC,QAAjB,CAA0BC,SAA1B,CAAoC,CAApC,EAAsC,CAAtC,EAAwC,CAAxC,EAA0C,CAA1C,CAAb,CAnBkB,CAoBlB;AACA;;AACA,SAAKC,QAAL,CAAc;AAAEf,MAAAA;AAAF,KAAd;AAED;;AAEDgB,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAET,MAAAA;AAAF,QAAoB,KAAKH,KAAL,CAAWD,YAAX,CAAwBG,SAAlD,CAFO,CAIP;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAyBD;;AAlE6C;;AAqEhD,eAAeT,iBAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass ProjectOfficeRead extends React.Component {\r\n  // state = { dataKeyBattery: null,dataKeyColumns: null, dataKeyElevators: null, dataKeyFloors: null, test: null};\r\n  state = {test: null};\r\n  componentDidMount() {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.MyStringStore;\r\n    console.log(\"================================\");\r\n    console.log(drizzle);\r\n    console.log(\"----------------\");\r\n    console.log(drizzleState);\r\n\r\n    console.log(\"Transactions\",drizzleState.transactions);\r\n\r\n    console.log(\"My string store\",drizzle.contracts.MyStringStore);\r\n    console.log(\"My contract address\",drizzle.contracts.MyStringStore.address);\r\n    console.log(\"Contracts\",this.props.drizzleState.contracts);\r\n\r\n    // let drizzle know we want to watch the `myString` method\r\n    // const dataKeyBattery = contract.methods[\"batteries\"].cacheCall();\r\n    // const dataKeyColumns = contract.methods[\"columns\"].cacheCall();\r\n    // const dataKeyElevators = contract.methods[\"elevators\"].cacheCall();\r\n    // const dataKeyFloors = contract.methods[\"floors\"].cacheCall();\r\n    const test = contract.methods.newOrder.cacheCall(1,2,3,4);\r\n    // save the `dataKey` to local component state for later reference\r\n    // this.setState({ dataKeyBattery, dataKeyColumns, dataKeyElevators,dataKeyFloors});\r\n    this.setState({ test });\r\n\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { MyStringStore } = this.props.drizzleState.contracts;\r\n\r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    // const batteries = MyStringStore.batteries[this.state.dataKeyBattery];\r\n    // const columns = MyStringStore.columns[this.state.dataKeyColumns];\r\n    // const elevators = MyStringStore.elevators[this.state.dataKeyElevators];\r\n    // const floors = MyStringStore.floors[this.state.dataKeyFloors];\r\n    // const test = MyStringStore.test[this.state.test];\r\n\r\n    // if it exists, then we display its value\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Controllers</th>\r\n              <th scope=\"col\">Shafts</th>\r\n              <th scope=\"col\">Doors</th>\r\n              <th scope=\"col\">Buttons</th>\r\n              <th scope=\"col\">Displays</th>\r\n              <th scope=\"col\">Speakers</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              {/* <td>{batteries && batteries.value}</td>\r\n              <td>{columns && columns.value}</td>\r\n              <td>{elevators && elevators.value}</td>\r\n              <td>{floors && floors.value}</td> */}\r\n              {/* <td>{test && test.value}</td> */}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default ProjectOfficeRead;\r\n"]},"metadata":{},"sourceType":"module"}