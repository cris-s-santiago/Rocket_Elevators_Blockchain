{"ast":null,"code":"var _jsxFileName = \"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/SolutionManufacturingRead.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SolutionManufacturingRead extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.SolutionManufacturing;\n    const dataKey = contract.methods[\"getCommand\"].cacheCall();\n    this.setState({\n      dataKey\n    });\n    console.log(\"Datakey:\", datakey);\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      SolutionManufacturing\n    } = this.props.drizzleState.contracts;\n    const newCommand = SolutionManufacturing.getCommand[this.state.dataKey]; // using the saved `dataKey`, get the variable we're interested in\n    // const batteries = MaterialProvider.batteries[this.state.dataKeyBattery];\n    // const columns = MaterialProvider.columns[this.state.dataKeyColumns];\n    // const elevators = MaterialProvider.elevators[this.state.dataKeyElevators];\n    // const floors = MaterialProvider.floors[this.state.dataKeyFloors];\n    // const test = MaterialProvider.test[this.state.test];\n    // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Controllers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Shafts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Doors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Buttons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Displays\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"New command -- \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: newCommand && newCommand.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MaterialProviderRead;","map":{"version":3,"sources":["/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/SolutionManufacturingRead.js"],"names":["React","SolutionManufacturingRead","Component","state","dataKey","componentDidMount","drizzle","drizzleState","props","contract","contracts","SolutionManufacturing","methods","cacheCall","setState","console","log","datakey","render","newCommand","getCommand","value","MaterialProviderRead"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,yBAAN,SAAwCD,KAAK,CAACE,SAA9C,CAAwD;AAAA;AAAA;AAAA,SAEtDC,KAFsD,GAE9C;AAACC,MAAAA,OAAO,EAAE;AAAV,KAF8C;AAAA;;AAGtDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA4B,KAAKC,KAAvC;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,qBAAnC;AAEA,UAAMP,OAAO,GAAGK,QAAQ,CAACG,OAAT,CAAiB,YAAjB,EAA+BC,SAA/B,EAAhB;AACA,SAAKC,QAAL,CAAc;AAACV,MAAAA;AAAD,KAAd;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBC,OAAvB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEP,MAAAA;AAAF,QAA4B,KAAKH,KAAL,CAAWD,YAAX,CAAwBG,SAA1D;AACA,UAAMS,UAAU,GAAGR,qBAAqB,CAACS,UAAtB,CAAiC,KAAKjB,KAAL,CAAWC,OAA5C,CAAnB,CAHO,CAKP;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME;AAAI,cAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AAAA,iCACE;AAAA,mCAKE;AAAA,wBAAKe,UAAU,IAAIA,UAAU,CAACE;AAA9B;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAyBD;;AAlDqD;;AAqDxD,eAAeC,oBAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass SolutionManufacturingRead extends React.Component {\r\n  // state = { dataKeyBattery: null,dataKeyColumns: null, dataKeyElevators: null, dataKeyFloors: null, test: null};\r\n  state = {dataKey: null};\r\n  componentDidMount() {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.SolutionManufacturing;\r\n\r\n    const dataKey = contract.methods[\"getCommand\"].cacheCall();\r\n    this.setState({dataKey});\r\n    console.log(\"Datakey:\",datakey);\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { SolutionManufacturing } = this.props.drizzleState.contracts;\r\n    const newCommand = SolutionManufacturing.getCommand[this.state.dataKey];\r\n\r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    // const batteries = MaterialProvider.batteries[this.state.dataKeyBattery];\r\n    // const columns = MaterialProvider.columns[this.state.dataKeyColumns];\r\n    // const elevators = MaterialProvider.elevators[this.state.dataKeyElevators];\r\n    // const floors = MaterialProvider.floors[this.state.dataKeyFloors];\r\n    // const test = MaterialProvider.test[this.state.test];\r\n\r\n    // if it exists, then we display its value\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Controllers</th>\r\n              <th scope=\"col\">Shafts</th>\r\n              <th scope=\"col\">Doors</th>\r\n              <th scope=\"col\">Buttons</th>\r\n              <th scope=\"col\">Displays</th>\r\n              <th scope=\"col\">New command -- </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              {/* <td>{batteries && batteries.value}</td>\r\n              <td>{columns && columns.value}</td>\r\n              <td>{elevators && elevators.value}</td>\r\n              <td>{floors && floors.value}</td> */}\r\n              <td>{newCommand && newCommand.value}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default MaterialProviderRead;\r\n"]},"metadata":{},"sourceType":"module"}