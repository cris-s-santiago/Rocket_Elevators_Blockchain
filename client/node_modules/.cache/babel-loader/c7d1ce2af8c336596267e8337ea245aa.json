{"ast":null,"code":"var _jsxFileName = \"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/MaterialsProviderRead.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MaterialsProviderRead extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKeyController: null,\n      dataKeyShafts: null,\n      dataKeyDoors: null,\n      dataKeyButtons: null,\n      dataKeyDisplays: null,\n      dataKeySpeakers: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.MaterialsProvider;\n    console.log(drizzle);\n    console.log(drizzleState); // let drizzle know we want to watch the `myString` method\n\n    const dataKeyController = contract.methods[\"controller\"].cacheCall();\n    const dataKeyShafts = contract.methods[\"shafts\"].cacheCall();\n    const dataKeyDoors = contract.methods[\"doors\"].cacheCall();\n    const dataKeyButtons = contract.methods[\"buttons\"].cacheCall();\n    const dataKeyDisplays = contract.methods[\"displays\"].cacheCall();\n    const dataKeySpeakers = contract.methods[\"speakers\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKeyController,\n      dataKeyShafts,\n      dataKeyDoors,\n      dataKeyButtons,\n      dataKeyDisplays,\n      dataKeySpeakers\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      MaterialsProvider\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n\n    const controller = MaterialsProvider.batteries[this.state.dataKeyController];\n    const shafts = MaterialsProvider.columns[this.state.dataKeyShafts];\n    const doors = MaterialsProvider.elevators[this.state.dataKeyDoors];\n    const buttons = MaterialsProvider.floors[this.state.dataKeyButtons];\n    const displays = MaterialsProvider.floors[this.state.dataKeyDisplays];\n    const speakers = MaterialsProvider.floors[this.state.dataKeySpeakers]; // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"submit\",\n            children: \"Create the Raw Material\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Material\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: controller && controller.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: shafts && shafts.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: doors && doors.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: buttons && buttons.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: displays && displays.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: speakers && speakers.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MaterialsProviderRead;","map":{"version":3,"sources":["/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/MaterialsProviderRead.js"],"names":["React","MaterialsProviderRead","Component","state","dataKeyController","dataKeyShafts","dataKeyDoors","dataKeyButtons","dataKeyDisplays","dataKeySpeakers","componentDidMount","drizzle","drizzleState","props","contract","contracts","MaterialsProvider","console","log","methods","cacheCall","setState","render","controller","batteries","shafts","columns","doors","elevators","buttons","floors","displays","speakers","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nclass MaterialsProviderRead extends React.Component {\r\n  state = { dataKeyController: null,dataKeyShafts: null, dataKeyDoors: null, dataKeyButtons: null, dataKeyDisplays: null, dataKeySpeakers: null};\r\n\r\n  componentDidMount() {\r\n    const { drizzle, drizzleState } = this.props;\r\n    const contract = drizzle.contracts.MaterialsProvider;\r\n\r\n    console.log(drizzle);\r\n    console.log(drizzleState);\r\n\r\n    // let drizzle know we want to watch the `myString` method\r\n    const dataKeyController = contract.methods[\"controller\"].cacheCall();\r\n    const dataKeyShafts = contract.methods[\"shafts\"].cacheCall();\r\n    const dataKeyDoors = contract.methods[\"doors\"].cacheCall();\r\n    const dataKeyButtons = contract.methods[\"buttons\"].cacheCall();\r\n    const dataKeyDisplays = contract.methods[\"displays\"].cacheCall();\r\n    const dataKeySpeakers = contract.methods[\"speakers\"].cacheCall();\r\n\r\n    // save the `dataKey` to local component state for later reference\r\n    this.setState({ dataKeyController, dataKeyShafts, dataKeyDoors, dataKeyButtons, dataKeyDisplays, dataKeySpeakers});\r\n  }\r\n\r\n  render() {\r\n    // get the contract state from drizzleState\r\n    const { MaterialsProvider } = this.props.drizzleState.contracts;\r\n \r\n    // using the saved `dataKey`, get the variable we're interested in\r\n    const controller = MaterialsProvider.batteries[this.state.dataKeyController];\r\n    const shafts = MaterialsProvider.columns[this.state.dataKeyShafts];\r\n    const doors = MaterialsProvider.elevators[this.state.dataKeyDoors];\r\n    const buttons = MaterialsProvider.floors[this.state.dataKeyButtons];\r\n    const displays = MaterialsProvider.floors[this.state.dataKeyDisplays];\r\n    const speakers = MaterialsProvider.floors[this.state.dataKeySpeakers];\r\n    \r\n    // if it exists, then we display its value\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table\">\r\n          <thead>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Create the Raw Material</button>\r\n            <tr>\r\n              <th scope=\"col\">Material</th>\r\n              <th scope=\"col\">Quantity</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{controller && controller.value}</td>\r\n              <td>{shafts && shafts.value}</td>\r\n              <td>{doors && doors.value}</td>\r\n              <td>{buttons && buttons.value}</td>\r\n              <td>{displays && displays.value}</td>\r\n              <td>{speakers && speakers.value}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default MaterialsProviderRead;"]},"metadata":{},"sourceType":"module"}