{"ast":null,"code":"var _jsxFileName = \"/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectOfficeRead extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKeyControllers: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.ProjectOffice; // let drizzle know we want to watch the `myString` method\n\n    const dataKeyControllers = contract.methods[\"Controllers\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKeyControllers\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      ProjectOffice\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n\n    const controllers = ProjectOffice.Controllers[this.state.dataKeyControllers]; // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"row\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-6\",\n        children: \"Doors needed : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-6\",\n        children: controllers && controllers.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default ProjectOfficeRead;","map":{"version":3,"sources":["/home/cristiane/blockchain/drizzle-react-tutorial/client/src/controllers/ProjectOfficeRead.js"],"names":["React","ProjectOfficeRead","Component","state","dataKeyControllers","componentDidMount","drizzle","props","contract","contracts","ProjectOffice","methods","cacheCall","setState","render","drizzleState","controllers","Controllers","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAAA;AAAA;AAAA,SAC/CC,KAD+C,GACvC;AAAEC,MAAAA,kBAAkB,EAAE;AAAtB,KADuC;AAAA;;AAG/CC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,aAAnC,CAFmB,CAInB;;AACA,UAAMN,kBAAkB,GAAGI,QAAQ,CAACG,OAAT,CAAiB,aAAjB,EAAgCC,SAAhC,EAA3B,CALmB,CAOnB;;AACA,SAAKC,QAAL,CAAc;AAAET,MAAAA;AAAF,KAAd;AACA;;AAEDU,EAAAA,MAAM,GAAG;AACR;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAoB,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAAlD,CAFQ,CAIR;;AACA,UAAMO,WAAW,GAAGN,aAAa,CAACO,WAAd,CAA0B,KAAKd,KAAL,CAAWC,kBAArC,CAApB,CALQ,CAOR;;AACA,wBACC;AAAA,8BACC;AAAK,QAAA,KAAK,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,EAC0C,GAD1C,eAEC;AAAK,QAAA,KAAK,EAAC,OAAX;AAAA,kBAAoBY,WAAW,IAAIA,WAAW,CAACE;AAA/C;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAMA;;AA5B8C;;AA+BhD,eAAejB,iBAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass ProjectOfficeRead extends React.Component {\r\n\tstate = { dataKeyControllers: null };\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { drizzle } = this.props;\r\n\t\tconst contract = drizzle.contracts.ProjectOffice;\r\n\r\n\t\t// let drizzle know we want to watch the `myString` method\r\n\t\tconst dataKeyControllers = contract.methods[\"Controllers\"].cacheCall();\r\n\r\n\t\t// save the `dataKey` to local component state for later reference\r\n\t\tthis.setState({ dataKeyControllers });\r\n\t}\r\n\r\n\trender() {\r\n\t\t// get the contract state from drizzleState\r\n\t\tconst { ProjectOffice } = this.props.drizzleState.contracts;\r\n\r\n\t\t// using the saved `dataKey`, get the variable we're interested in\r\n\t\tconst controllers = ProjectOffice.Controllers[this.state.dataKeyControllers];\r\n\r\n\t\t// if it exists, then we display its value\r\n\t\treturn (\r\n\t\t\t<row>\r\n\t\t\t\t<div class=\"col-6\">Doors needed : </div>{\" \"}\r\n\t\t\t\t<div class=\"col-6\">{controllers && controllers.value}</div>\r\n\t\t\t</row>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ProjectOfficeRead;\r\n"]},"metadata":{},"sourceType":"module"}